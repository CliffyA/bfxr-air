<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   
					   width="637" height="592"
					   minHeight="592"
					   maxHeight="705"
					   minWidth="637"
					   maxWidth="637"
					    
					   showStatusBar="false" 
					   title="Bfxr" 
					   backgroundColor="#CCBDA1" 
					   xmlns:ns="com.increpare.bfxr_interface.components.*"
					   closing="closeApplication(event)"
					   creationComplete="onCreationComplete(event)">		
	
	<fx:Script>
		
		import mx.containers.Panel;
		import mx.controls.Alert;
		import mx.managers.PopUpManager;
		
		import spark.components.TitleWindow;
			
		
		private function loadFromFile(event:InvokeEvent):void {
			
			var args:Array = event.arguments as Array;
			
			if (args.length==0) 
				return;
				
			var filepath:String = args[0];
			
			
			_fileRef =  new File(filepath); 
			
			var extpart:String = filepath.substr(filepath.length-5);
			
			
			if (extpart=="sound")
			{
				_fileRef.addEventListener(Event.COMPLETE, onLoadSettings); 
			}
			else if (extpart=="brary")
			{
				_fileRef.addEventListener(Event.COMPLETE, onLoadAllSettings); 			
			}
			else
			{
				trace("invalid file type provided " + filepath);
				return;
			}	
			
			_fileRef.load(); 
		}
		
		
		private function onCreationComplete(event:Event):void
		{
			//LOAD FROM FILE CODE
			
			nativeApplication.addEventListener(InvokeEvent.INVOKE,loadFromFile);			
						
		}	
			
		/** * Handler function for error events triggered by the ApplicationUpdater.initialize 
		 * @param ErrorEvent 
		 */ 
		private function onError(event:ErrorEvent):void 
		{ 
			Alert.show(event.toString()); 
		} 		
		
		private function onApplicationComplete(event:Event):void
		{
			//ExternalInterface.addCallback("hasModifiedData",main.hasModifiedData);
		}
		
		/* Prompts user if things are in need of saving */
		public function closeApplication(e:Event):void
		{      
			if (main.hasModifiedData()==false)
				return;
			
			e.preventDefault();
			
			var myClickHandler:Function = function (evt_obj:Object):void {
				if (evt_obj.detail == Alert.OK) {
					exitAll();
				}
			};
			
			Alert.show(
				"There are unapplied changes.  Are you sure you want to exit?", 
				"Alert", 
				Alert.OK | Alert.CANCEL, 
				null, 
				myClickHandler, 
				null, 
				Alert.OK);
			
		}
		
		public function exitAll():void
		{
			NativeApplication.nativeApplication.exit();			
		}
		
		//returns url of swf...should change to http://www.bfxr.net/ for release builds
		public function GetApplicationURL():String
		{
			return "http://www.bfxr.net/";
			//return ExternalInterface.call('window.location.href.toString');
		}
		
		public function GetPastedString():String
		{			
			var pasted:String = String(Clipboard.generalClipboard.getData(ClipboardFormats.TEXT_FORMAT));
			return pasted;
		}
		
		public function LookForSoundInURL():String
		{
			//in air, there's no url, so no parameter can be passed
			return "";
		}
		
		
		/*
		FILE RELATED ACTIVITIES
		*/
		
		private var _fileRef:File; // File reference for loading in sfs file
		
		/**
		 * Opens a browse window to load a sound setting file
		 */
		public function clickLoadSound():void
		{
			_fileRef = new File();
			_fileRef.addEventListener(Event.SELECT, onSelectSettings);
			try
			{				
				_fileRef.browse([ new FileFilter("SFX Sample Files (*.bfxrsound)", "*.bfxrsound")]);
			}
			catch (e:Error)
			{
				trace(e.message);
			}
		}
		
		public function SaveAllWaves(callback:Function):void
		{
			_fileRef = new File();
			
			var onSelectSaveAllWaveDirectory:Function = function(evt:Event):void {
				callback(_fileRef.nativePath);
			}
				
			_fileRef.addEventListener(Event.SELECT, onSelectSaveAllWaveDirectory);
			_fileRef.browseForDirectory("Select output directory");
		}
		
		/**
		 * When the user selects a file, begins loading it
		 * @param	e	Select event
		 */
		public function onSelectSettings(e:Event):void
		{
			_fileRef.cancel();
			_fileRef.removeEventListener(Event.SELECT, onSelectSettings);
			_fileRef.addEventListener(Event.COMPLETE, onLoadSettings);
			_fileRef.load();
		}
		
		public function DoSave(dat:String,filter:String,extension:String):void
		{			
			//new FileReference().save(dat, filter);
			mySave(dat,filter,extension);
		}
		
		
		//from http://analogd.com/blog/adobe-air/adobe-air-tips-serie-browseforsave-set-default-file-extension-and-validatemodify/
		
		import flash.filesystem.File;
		import flash.filesystem.FileStream;
		import flash.events.Event;
		
		private var docsDir:File;
		private var MY_DEFAULT_EXTENSION:String = "bfxrsound";
		private var VALID_EXTENSIONS_LIST:Array = ["bfxrsound"];
		private var selectedextension:String;
		private var dattowrite:String;
		public function mySave(dat:String,filename:String,extension:String):void
		{
			dattowrite=dat;
			MY_DEFAULT_EXTENSION=extension;
			VALID_EXTENSIONS_LIST=[extension];
			docsDir = File.documentsDirectory.resolvePath(filename);
			docsDir.browseForSave("Save As");
			docsDir.addEventListener(Event.SELECT, mySaveHandler);
		}
		private function mySaveHandler(event:Event):void
		{
			docsDir.removeEventListener(Event.SELECT, mySaveHandler);
			//Split the returned File native path to retrieve file name
			var tmpArr:Array = File(event.target).nativePath.split(File.separator);
			var fileName:String = tmpArr.pop();//remove last array item and return its content
			//Check if the extension given by user is valid, if not the default on is put.
			//(for example if user put himself/herself an invalid file extension it is removed in favour of the default one)
			var conformedFileDef:String = conformExtension(fileName);//comment: updated 17.11.2008 removed the typo
			tmpArr.push(conformedFileDef);
			//Create a new file object giving as input our new path with conformed file extension
			var conformedFile:File = new File("file:///" + tmpArr.join(File.separator));
			//Make save
			var stream:FileStream = new FileStream();
			stream.open(conformedFile, FileMode.WRITE);
			stream.writeUTF(dattowrite);
			stream.close();
		}
		
		private function conformExtension(fileDef:String):String
		{
			var fileExtension:String = fileDef.split(".")[1];
			for each(var it:String in VALID_EXTENSIONS_LIST){
				if( fileExtension == it)
					return fileDef;
				
			}
			return fileDef.split(".")[0] + "." + MY_DEFAULT_EXTENSION;
		}

		
		public function CanSaveAllWaves():Boolean
		{
			return true;
		}
		

		public function DoSaveAllWaves(dir:String,wd:Array):void
		{
			//main.showLoading();
			//trace("dir = " + dir);
			var myDelay:Timer = new Timer(10);
			
			var i:int=0;
			//trace("wd.length = " + wd.length);
			var tick:Function = function():void {
				if (i &lt; wd.length)
				{
					//main._progBar.indeterminate=false;	
					//main._progBar.setProgress(i,wd.length);	
					var filename:String = wd[i][0];
					var filedat:ByteArray = wd[i][1];
					
					
					var file:File = new File();
					file = file.resolvePath(dir);
					file = file.resolvePath("./"+filename+".wav");
					//trace("path = "+file.toString());
					var fs:FileStream = new FileStream();
					fs.open(file,FileMode.WRITE);
					fs.writeBytes(filedat);
					fs.close();					
				}
				else					
				{
					//trace("done");
					//main._progBar
					//PopUpManager.removePopUp(main._progBar);					
					myDelay.stop();					
				}
				i++;
			}
				
			myDelay.addEventListener(TimerEvent.TIMER, tick);
			myDelay.start();
		}	
		
					
		public function DoLoadAll():void
		{
			_fileRef = new File();
			_fileRef.addEventListener(Event.SELECT, onSelectLoadAllSettings);
			try
			{				
				_fileRef.browse([ new FileFilter("BFXR Sample and Mixer Library (*.bfxrlibrary)", "*.bfxrlibrary")]);
			}
			catch (e:Error)
			{
				trace(e.message);
			}
		}
		
		public function onSelectLoadAllSettings(e:Event):void
		{
			_fileRef.cancel();
			
			_fileRef.removeEventListener(Event.SELECT, onSelectLoadAllSettings);
			_fileRef.addEventListener(Event.COMPLETE, onLoadAllSettings);
			_fileRef.load();
		}
		
		
		/**
		 * Once loaded, passes the file to the synthesizer to parse
		 * @param	e	Complete event
		 */
		public function onLoadAllSettings(e:Event):void
		{
			var i:int;
			
			_fileRef.removeEventListener(Event.COMPLETE, onLoadAllSettings);
			var dat:String = _fileRef.data.toString();									
			main.onLoadAllSettings(dat);
			_fileRef = null;
		}
		
		/**
		 * Once loaded, passes the file to the synthesizer to parse
		 * @param	e	Complete event
		 */
		public function onLoadSettings(e:Event):void
		{
			_fileRef.removeEventListener(Event.COMPLETE, onLoadSettings);
			var dat:String = _fileRef.data.toString();
			main.onLoadSettings(dat);
			_fileRef = null;
		}
	</fx:Script>
	
	
	<ns:Bfxr_interface  id="main" top="4" left="4" bottom="4" right="4"/>
</s:WindowedApplication>